# 파이썬 리뷰
# 코드의 들여쓰기로 블록 구분
# 인터프리터 (Interpreter) 언어 -> 프로그램의 코드가 한 라인씩 순서대로 해석되고 실행됨
# 멀티 패러다임 언어 -> 파이썬은 절차지향언어(C언어) 및 객체지향언어(자바 등)의 특성을 모두 가지고 있다.
# 절차언어 -> 위에서 아래로 순차적으로 프로그램이 진행되도록 구현하는 것 -> 순서가 중요?
# 객체지향언어 -> 실제 세계를 모델링화하여 객체를 만드는 것

# 식별자 (변수) -> 변수, 리스트, 튜플, 딕셔너리, 함수, 클래스
# 파이썬은 snake_case : 단어와 단어를 _로 연결해서 식별자를 만듬
# 자바는 camelCase : 첫 단어의 시작을 소문자로 하고 다음에 오는 단어 부터는 첫자를 대문자로 표기
# PascalCase : 각 단어의 시작을 대문자로 한다 (클래스 이름에서 사용)

# 줄 들여쓰기 -> 파이썬은 들여쓰기로 블록 구분

# 표준 입출력 함수
# 대괄호 [] : 리스트 // 중괄호 {} : 딕셔너리 // 소괄호 () : 함수의 인수, 튜플

# print() : 결과를 출력하거나 사용자에게 입력값에 대해 가이드를 제공할때 사용
# , (콤마)는 띄어쓰기
# end와 sep 옵션 -> 기본적으로 문자열이나 값을 전부 입력하고 나서 뒤쪽에 ,end= // ,sep= 형식으로 사용됨
# end : 출력할 때 가장 끝에 자동으로 삽입되는 문자를 지정하는 옵션 -> 기본값 \n이다. (줄바꿈) ,end="\n"
# sep : 데이터를 출력할 때 중간에 삽입되는 문자를 지정하는 옵션 (콤마)의 역할 지정하는 옵션 -> 기본값은 space 이다. ,sep=" "

name = "홍태화" # 'str'
age = 29 # 'int'
addr = "서울 중구"

# C언어 스타일, % 방식
print("이름 : %s" % name)  # 문자열 표현 -> %s
print("이름 : ", "%s" %name) # 다음과 같이 띄어쓰기는 가능
print("나이 : %d" %age) # 정수형 표현 -> %d
print("주소 : %s\n" %addr) # 문자열 표현 이후 줄바꿈

# 파이썬 스타일 1, str.format
print("이름 : {} {}".format(name,addr)) # {} 중괄호 형태 -> .format(변수) 입력
print("나이 : {}\n".format(age)) # 줄바꿈을 위한 \n은 문자열 안 맨 끝에 입력

# 파이썬 스타일 2, 가장 최근에 추가된 방식, f와 {}로 사용
print(f"이름 : {name}") # "앞에 f 추가 후 {변수} 형태를 이용한 표현
print(f"나이 : {age}\n")  # 문자열 안에 같이 입력하는 것이 특징

# 자바 스타일
print("이름 : "+name)
print("나이 : "+str(age)) # 정수형 바로 입력 불가능 -> 이 방식은 문자열로 변환 필요
print("주소 : "+addr,end="\n\n") # 이 방식은 줄바꿈을 위해서 맨 바깥에 end 옵션을 이용해야만함

# 정렬
# < 좌측  //  > 우측  //  ^ 중앙
# print(f"{변수}") 방식으로만 사용 가능?
num1 = 100
num2 = 1000
num3 = 10000
num4 = 100.26342123
print(f"|{num1:^7}|") # 7칸 중 중앙 정렬 -> 100 3칸 차지 -> 양 옆 4칸
print(f"|{num2:^7}|") # 7칸 중 중앙 정렬 -> 1000 4칸 차지 -> 양 옆 3칸
print(f"|{num3:^7}|") # 7칸 중 중앙 정렬 -> 10000 5칸 차지 -> 양 옆 2칸
print("|%d|" %num1) # -> 이 표현 방식은 정렬 불가능?
print("|{}|".format(num1)) # -> 이 표현 방식 또한 정렬 불가능?
print(f"|{num1:7}|") # 7칸 중 오른쪽 정렬
print(f"|{num1:>7}|") # 7칸 중 오른쪽 정렬
print(f"|{num1:<7}|") # 7칸 중 왼쪽 정렬
print(f"|{num4:.2f}|") # :.xf 방식을 이용하여 소수점 부분 자르기 가능

# input() -> 사용자의 입력을 받아 그 값을 프로그램에서 사용하고자 할 때 input() 함수 사용
# 입력받은 값을 저장할 변수를 만들어 값 대입
# input 함수를 통하여 입력 받은 데이터는 -> 무조건 문자열
# 원하는 데이터형으로 사용하려면 변환 필요 (input을 받을 때도 가능 / 추후 변경도 가능)
name = input("이름을 입력하세요 : ")
print(name)


